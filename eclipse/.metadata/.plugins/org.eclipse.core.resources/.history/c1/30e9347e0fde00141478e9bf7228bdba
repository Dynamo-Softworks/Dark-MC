package com.ncd1998.nmod.World;

import java.util.Random;

import com.ncd1998.nmod.Init.NBlocks;

import net.minecraft.block.Block;
import net.minecraft.block.state.pattern.BlockHelper;
import net.minecraft.init.Blocks;
import net.minecraft.util.BlockPos;
import net.minecraft.world.World;
import net.minecraft.world.chunk.IChunkProvider;
import net.minecraft.world.gen.feature.WorldGenAbstractTree;
import net.minecraft.world.gen.feature.WorldGenMinable;
import net.minecraftforge.fml.common.IWorldGenerator;

public class NWorldGenMysticTree extends WorldGenAbstractTree implements IWorldGenerator{

	public NWorldGenMysticTree(boolean p_i45448_1_) {
		super(p_i45448_1_);
		// TODO Auto-generated constructor stub
	}

	@Override
	public boolean generate(World worldIn, Random p_180709_2_, BlockPos p_180709_3_) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	   public void generate(Random random, int chunkX, int chunkZ, World world, IChunkProvider chunkGenerator, IChunkProvider chunkProvider) {
	     
	      switch(world.provider.getDimensionId()){
	      case 1:
	         generateEnd(world, random, chunkX, chunkZ);
	         break;
	      case 0:
	         generateOverworld(world, random, chunkX, chunkZ);
	         break;
	      case -1:
	         generateNether(world, random, chunkX, chunkZ);
	         break;
	      }
	   }
	
	public void generateEnd(World world, Random random, int x, int z){
	      
	   }
	   
	   public void generateOverworld(World world, Random random, int x, int z){
		   
	   }
	   
	   public void generateNether(World world, Random random, int x, int z){

	      }

	   public void generateTree(Block block, World world, Random random, int chunkX, int chunkZ, int treehight, int chance , int minY, int maxY, Block generateIn){
		      
		      int treetall = treehight;
		      int hightRange = maxY - minY;
		      WorldGenMinable gen = new WorldGenMinable(block.getDefaultState(), vienSize, BlockHelper.forBlock(generateIn));
		      for(int i = 0; i < chance; i++){
		         int xRand = chunkX * 16 + random.nextInt(16);
		         int yRand = random.nextInt(hightRange) + minY;
		         int zRand = chunkZ * 16 + random.nextInt(16);
		         gen.generate(world, random,new BlockPos(xRand, yRand, zRand));
		      }
		   }
}
